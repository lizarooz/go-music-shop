// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: catalog.proto

package catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	// Получить все альбомы
	GetAlbums(ctx context.Context, in *GetAlbumsRequest, opts ...grpc.CallOption) (*GetAlbumsResponse, error)
	// Получить альбом по ID
	GetAlbumByID(ctx context.Context, in *GetAlbumByIDRequest, opts ...grpc.CallOption) (*GetAlbumByIDResponse, error)
	// Создать новый альбом
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumResponse, error)
	// Обновить альбом
	UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*UpdateAlbumResponse, error)
	// Удалить альбом
	DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error)
	// Поиск альбома по исполнителю
	SearchAlbumsByArtist(ctx context.Context, in *SearchAlbumsByArtistRequest, opts ...grpc.CallOption) (*SearchAlbumsByArtistResponse, error)
	// Получить альбомы в наличии
	GetAlbumsInStock(ctx context.Context, in *GetAlbumsInStockRequest, opts ...grpc.CallOption) (*GetAlbumsInStockResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) GetAlbums(ctx context.Context, in *GetAlbumsRequest, opts ...grpc.CallOption) (*GetAlbumsResponse, error) {
	out := new(GetAlbumsResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/GetAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetAlbumByID(ctx context.Context, in *GetAlbumByIDRequest, opts ...grpc.CallOption) (*GetAlbumByIDResponse, error) {
	out := new(GetAlbumByIDResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/GetAlbumByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumResponse, error) {
	out := new(CreateAlbumResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/CreateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*UpdateAlbumResponse, error) {
	out := new(UpdateAlbumResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/UpdateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error) {
	out := new(DeleteAlbumResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/DeleteAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SearchAlbumsByArtist(ctx context.Context, in *SearchAlbumsByArtistRequest, opts ...grpc.CallOption) (*SearchAlbumsByArtistResponse, error) {
	out := new(SearchAlbumsByArtistResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/SearchAlbumsByArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetAlbumsInStock(ctx context.Context, in *GetAlbumsInStockRequest, opts ...grpc.CallOption) (*GetAlbumsInStockResponse, error) {
	out := new(GetAlbumsInStockResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/GetAlbumsInStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations must embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	// Получить все альбомы
	GetAlbums(context.Context, *GetAlbumsRequest) (*GetAlbumsResponse, error)
	// Получить альбом по ID
	GetAlbumByID(context.Context, *GetAlbumByIDRequest) (*GetAlbumByIDResponse, error)
	// Создать новый альбом
	CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumResponse, error)
	// Обновить альбом
	UpdateAlbum(context.Context, *UpdateAlbumRequest) (*UpdateAlbumResponse, error)
	// Удалить альбом
	DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error)
	// Поиск альбома по исполнителю
	SearchAlbumsByArtist(context.Context, *SearchAlbumsByArtistRequest) (*SearchAlbumsByArtistResponse, error)
	// Получить альбомы в наличии
	GetAlbumsInStock(context.Context, *GetAlbumsInStockRequest) (*GetAlbumsInStockResponse, error)
	mustEmbedUnimplementedCatalogServiceServer()
}

// UnimplementedCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) GetAlbums(context.Context, *GetAlbumsRequest) (*GetAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbums not implemented")
}
func (UnimplementedCatalogServiceServer) GetAlbumByID(context.Context, *GetAlbumByIDRequest) (*GetAlbumByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumByID not implemented")
}
func (UnimplementedCatalogServiceServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedCatalogServiceServer) UpdateAlbum(context.Context, *UpdateAlbumRequest) (*UpdateAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedCatalogServiceServer) SearchAlbumsByArtist(context.Context, *SearchAlbumsByArtistRequest) (*SearchAlbumsByArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAlbumsByArtist not implemented")
}
func (UnimplementedCatalogServiceServer) GetAlbumsInStock(context.Context, *GetAlbumsInStockRequest) (*GetAlbumsInStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumsInStock not implemented")
}
func (UnimplementedCatalogServiceServer) mustEmbedUnimplementedCatalogServiceServer() {}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_GetAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/GetAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetAlbums(ctx, req.(*GetAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetAlbumByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetAlbumByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/GetAlbumByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetAlbumByID(ctx, req.(*GetAlbumByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/UpdateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateAlbum(ctx, req.(*UpdateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/DeleteAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteAlbum(ctx, req.(*DeleteAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SearchAlbumsByArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAlbumsByArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SearchAlbumsByArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/SearchAlbumsByArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SearchAlbumsByArtist(ctx, req.(*SearchAlbumsByArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetAlbumsInStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumsInStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetAlbumsInStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/GetAlbumsInStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetAlbumsInStock(ctx, req.(*GetAlbumsInStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlbums",
			Handler:    _CatalogService_GetAlbums_Handler,
		},
		{
			MethodName: "GetAlbumByID",
			Handler:    _CatalogService_GetAlbumByID_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _CatalogService_CreateAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _CatalogService_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _CatalogService_DeleteAlbum_Handler,
		},
		{
			MethodName: "SearchAlbumsByArtist",
			Handler:    _CatalogService_SearchAlbumsByArtist_Handler,
		},
		{
			MethodName: "GetAlbumsInStock",
			Handler:    _CatalogService_GetAlbumsInStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog.proto",
}
