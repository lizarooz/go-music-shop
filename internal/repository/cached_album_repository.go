// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (Decorator Pattern)
package repository

import (
	"context"
	"encoding/json"
	"fmt"
	"go-music-shop/internal/domain"
	"go-music-shop/pkg/redis"
	"log"
	"time"
)

// CachedAlbumRepository - –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª—é–±–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω Decorator —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
type CachedAlbumRepository struct {
	repo    domain.AlbumRepository // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (PostgreSQL)
	redis   *redis.RedisClient     // Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
	timeOut time.Duration          // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å Redis
}

// NewCachedAlbumRepository - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func NewCachedAlbumRepository(repo domain.AlbumRepository, redisClient *redis.RedisClient) *CachedAlbumRepository {
	return &CachedAlbumRepository{
		repo:    repo,
		redis:   redisClient,
		timeOut: 2 * time.Second, // 2 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç –¥–ª—è Redis –æ–ø–µ—Ä–∞—Ü–∏–π
	}
}

// generateCacheKey - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ ID
func (c *CachedAlbumRepository) generateCacheKey(dataType string, id string) string {
	return fmt.Sprintf("album:%s:%s", dataType, id)
}

// GetAll - –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–ª—å–±–æ–º—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (c *CachedAlbumRepository) GetAll() ([]domain.Album, error) {
	cacheKey := c.generateCacheKey("all", "")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Redis
	ctx, cancel := context.WithTimeout(context.Background(), c.timeOut)
	defer cancel()

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
	cachedData, err := c.redis.Get(ctx, cacheKey)
	if err != nil {
		log.Printf("reading from cache error: %v", err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫—ç—à–∞ - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
	if cachedData != "" {
		var albums []domain.Album
		if err := json.Unmarshal([]byte(cachedData), &albums); err == nil {
			log.Println("data from cache has been delivered (all albums)")
			return albums, nil
		} else {
			log.Printf("parsing cached data error: %v", err)
		}
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã
	albums, err := c.repo.GetAll()
	if err != nil {
		return nil, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
	go func() {
		ctx := context.Background()
		if data, err := json.Marshal(albums); err == nil {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–ª—å–±–æ–º–æ–≤
			if err := c.redis.Set(ctx, cacheKey, string(data), time.Minute); err != nil {
				log.Printf("saving in cache error: %v", err)
			} else {
				log.Println("data has been saved in cache (all albums)")
			}
		}
	}()

	return albums, nil
}

// GetByID - –ø–æ–ª—É—á–∞–µ—Ç –∞–ª—å–±–æ–º –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (c *CachedAlbumRepository) GetByID(id string) (*domain.Album, error) {
	cacheKey := c.generateCacheKey("id", id)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Redis
	ctx, cancel := context.WithTimeout(context.Background(), c.timeOut)
	defer cancel()

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
	cachedData, err := c.redis.Get(ctx, cacheKey)
	if err != nil {
		log.Printf("reading from cache error: %v", err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫—ç—à–∞ - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
	if cachedData != "" {
		var album domain.Album
		if err := json.Unmarshal([]byte(cachedData), &album); err == nil {
			log.Printf("data from cache has been delivered (album by id)")
			return &album, nil
		} else {
			log.Printf("parsing cache data error: %v", err)
		}
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã
	album, err := c.repo.GetByID(id)
	if err != nil {
		return nil, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
	go func() {
		ctx := context.Background()
		if data, err := json.Marshal(album); err == nil {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞
			if err := c.redis.Set(ctx, cacheKey, string(data), 5*time.Minute); err != nil {
				log.Printf("saving in cache error: %v", err)
			} else {
				log.Println("data has been saved in cache (album by id)")
			}
		}
	}()

	return album, nil
}

// Create - —Å–æ–∑–¥–∞–µ—Ç –∞–ª—å–±–æ–º –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –∫—ç—à–∞ –≤—Å–µ—Ö –∞–ª—å–±–æ–º–æ–≤
func (c *CachedAlbumRepository) Create(album *domain.Album) error {
	// –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –≤ –±–∞–∑–µ
	err := c.repo.Create(album)
	if err != nil {
		return err
	}

	// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —ç—Ç–æ–≥–æ –∞–ª—å–±–æ–º–∞
	go func() {
		c.invalidateCache("artist", album.Artist) // –ö—ç—à –∞–ª—å–±–æ–º–æ–≤ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
		c.invalidateCache("stock", "")            // –ö—ç—à –∞–ª—å–±–æ–º–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
		c.cacheAlbum(album)                       // –ö—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–ª—å–±–æ–º
	}()

	return nil
}

// cacheAlbum - –∫—ç—à–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–ª—å–±–æ–º
func (c *CachedAlbumRepository) cacheAlbum(album *domain.Album) {
	cacheKey := c.generateCacheKey("id", album.ID)
	ctx := context.Background()

	if data, err := json.Marshal(album); err == nil {
		if err := c.redis.Set(ctx, cacheKey, string(data), 5*time.Minute); err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞: %v", err)
		} else {
			log.Printf("üíæ –ù–æ–≤—ã–π –∞–ª—å–±–æ–º %s –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω", album.ID)
		}
	}
}

// Update - –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–ª—å–±–æ–º –∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ –∫—ç—à
func (c *CachedAlbumRepository) Update(album *domain.Album) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –∞–ª—å–±–æ–º —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
	oldAlbum, _ := c.repo.GetByID(album.ID)

	err := c.repo.Update(album)
	if err != nil {
		return err
	}

	go func() {
		// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–ª—å–±–æ–º–æ–º
		c.invalidateCache("id", album.ID)

		if oldAlbum != nil {
			c.invalidateCache("artist", oldAlbum.Artist) // –°—Ç–∞—Ä—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
		}

		c.invalidateCache("artist", album.Artist) // –ù–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
		c.invalidateCache("stock", "")            // –ö—ç—à –Ω–∞–ª–∏—á–∏—è

	}()

	return nil
}

// Delete - —É–¥–∞–ª—è–µ—Ç –∞–ª—å–±–æ–º –∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ –∫—ç—à
func (c *CachedAlbumRepository) Delete(id string) error {
	// –ü–æ–ª—É—á–∞–µ–º –∞–ª—å–±–æ–º –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
	album, _ := c.repo.GetByID(id)

	err := c.repo.Delete(id)
	if err != nil {
		return err
	}

	go func() {
		c.invalidateCache("id", id)
		if album != nil {
			c.invalidateCache("artist", album.Artist) // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
		}
		c.invalidateCache("stock", "") // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –Ω–∞–ª–∏—á–∏—è
	}()

	return nil
}

// invalidateCache - —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
func (c *CachedAlbumRepository) invalidateCache(dataType string, id string) {
	cacheKey := c.generateCacheKey(dataType, id)

	ctx, cancel := context.WithTimeout(context.Background(), c.timeOut)
	defer cancel()

	if err := c.redis.Delete(ctx, cacheKey); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ %s: %v", cacheKey, err)
	}
}

func (c *CachedAlbumRepository) GetByArtist(artist string) ([]domain.Album, error) {
	cacheKey := c.generateCacheKey("artist", artist)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Redis
	ctx, cancel := context.WithTimeout(context.Background(), c.timeOut)
	defer cancel()

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
	cachedData, err := c.redis.Get(ctx, cacheKey)
	if err != nil {
		log.Printf("reading from cache error: %v", err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫—ç—à–∞ - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
	if cachedData != "" {
		var albums []domain.Album
		if err := json.Unmarshal([]byte(cachedData), &albums); err == nil {
			log.Printf("data from cache has been delivered (albums by artist %s)", artist)
			return albums, nil
		} else {
			log.Printf("parsing cache data error: %v", err)
		}
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã
	albums, err := c.repo.GetByArtist(artist)
	if err != nil {
		return nil, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
	go func() {
		ctx := context.Background()
		if data, err := json.Marshal(albums); err == nil {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
			if err := c.redis.Set(ctx, cacheKey, string(data), 2*time.Minute); err != nil {
				log.Printf("saving in cache error: %v", err)
			} else {
				log.Printf("data has been saved in cache (albums by artist %s)", artist)
			}
		}
	}()

	return albums, nil
}

func (c *CachedAlbumRepository) GetInStock() ([]domain.Album, error) {
	cacheKey := c.generateCacheKey("stock", "")

	ctx, cancel := context.WithTimeout(context.Background(), c.timeOut)
	defer cancel()

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
	cachedData, err := c.redis.Get(ctx, cacheKey)
	if err != nil {
		log.Printf("reading from cache error: %v", err)
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
	if cachedData != "" {
		var albums []domain.Album
		if err := json.Unmarshal([]byte(cachedData), &albums); err == nil {
			log.Printf("data from cache has been delivered (albums in stock)")
			return albums, nil
		} else {
			log.Printf("parsing from cache error: %v", err)
		}
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–¥
	albums, err := c.repo.GetInStock()
	if err != nil {
		return nil, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ (—Ç.–∫ —á–∞—Å—Ç–æ –º–µ–Ω—è—é—Ç—Å—è)
	go func() {
		ctx := context.Background()
		if data, err := json.Marshal(albums); err == nil {
			if err := c.redis.Set(ctx, cacheKey, string(data), 30*time.Second); err != nil {
				log.Printf("saving in cache error: %v", err)
			} else {
				log.Printf("data has been saved in cache (albums in stock)")
			}
		}
	}()

	return albums, nil
}
